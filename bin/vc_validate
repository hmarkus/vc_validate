#!/usr/bin/env python
#
# Copyright 2018
# Johannes K. Fichte, TU Wien, Austria
# Markus Hecher, TU Wien, Austria
#
# vc_validate is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.  htd_validate is distributed in
# the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.  You should have received a copy of the GNU General Public
# License along with htd_validate.  If not, see
# <http://www.gnu.org/licenses/>.

from __future__ import absolute_import

import argparse
import inspect
import logging
import logging.config
import os
import subprocess
import sys

# TODO: figure out a new way to use imports for binaries here
# this just seems really really ugly
src_path = os.path.abspath(os.path.realpath(inspect.getfile(inspect.currentframe())))
src_path = os.path.realpath(os.path.join(src_path, '../..'))
if src_path not in sys.path:
    sys.path.insert(0, src_path)
#print src_path
src_path = os.path.realpath(os.path.join(src_path, './lib/htd_validate'))

#print src_path
if src_path not in sys.path:
    sys.path.insert(0, src_path)

#print sys.path

import vc_validate
import htd_validate

__author__ = 'Johannes K. Fichte & Markus Hecher'
__license__ = 'GPL'


def get_git_revision_short_hash():
    return subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD'], stderr=subprocess.STDOUT)[:-1]

__version__ = None

try:
    __version__ = '1.0.1-dev (hash: %s)' % get_git_revision_short_hash()
except:
    __version__ = '1.0.1-dev'

def setup_logging(config_file='%s/logging.conf' % (os.path.dirname(__file__))):
    try:
        logging.config.fileConfig(config_file)
    except:
        logging.warning("Unable to find the config for logging")

setup_logging(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'logging.conf'))


def is_valid_file(parser, arg):
    if not arg:
        parser.error('Missing file.')
    if not os.path.exists(arg):
        parser.error('The file "%s" does not exist!' % arg)
    return arg


def parse_args():
    parser = argparse.ArgumentParser(description='%(prog)s')
    parser.add_argument('--version', action='version', version='%(prog)s {version}'.format(version=__version__))
    required = parser.add_argument_group('required arguments')
    required.add_argument('-g', '--hypergraph', dest='graph_filename', action='store', required=True,
                          type=lambda x: is_valid_file(parser, x),
                          help='Input dimacs hypergraph file')
    required.add_argument('-vc', '--vertexcover', dest='vertexcover_filename', action='store', required=True,
                          type=lambda x: is_valid_file(parser, x), help='Input vertexcover file')
    args = parser.parse_args()
    return args


def main():
    args = parse_args()
    graph_filename = args.graph_filename
    vertexcover_filename = args.vertexcover_filename
    HG = htd_validate.utils.Graph.from_file(graph_filename)
    VC = vc_validate.vertexcover.VertexCover.from_file(vertexcover_filename, strict=True)
    ret = VC.validate(HG)
    sys.exit(not ret)


if __name__ == "__main__":
    main()
